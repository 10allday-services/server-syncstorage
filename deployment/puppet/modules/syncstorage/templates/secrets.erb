<%-#
#
#  The result of this template will be a file with one comma-separated line
#  per node hostname, giving the set of token-signing secrets for that node.
#  Like this:
#
#     https://hostname1/,ts1:secret11,ts2:secret12,...,tsN,secret1N
#     https://hostname2/,ts1:secret21,ts2:secret22,...,tsN,secret2N
#     ...
#     https://hostnameM/,ts1:secretM1,ts2:secretM2,...,tsN,secretMN
#
#  In this implementation, we derive each node-specific secret from a master
#  secret using HKDF.  This minimizes the amount of data that actually has to
#  be kept secret.
#
-%>
<%-
  require "openssl"

  def derive_secret(node_name, master_secret)
    # Derive a node-specific secret using HKDF-Extract.
    # Note that we skip the KDF-Expand step, since the master secret can be
    # assumed to be a good uniformly-distributed source of entropy.
    prk = master_secret
    okm = ""
    # This is the HKDF-Extract step, using node_name as the info parameter,
    # fixed to 4 iterations so that it produces an output of 256 hex bytes.
    # This seems excessively long to me, but it's what the file format docs
    # insist upon.
    t = ""
    for i in 1..4
      t = OpenSSL::HMAC.digest("SHA256", prk, t + node_name + i.chr)
      okm = okm + t
    end
    # The file format docs require secrets to be hexadecimal strings.
    # I don't know whether this is strictly necessary, but watevz.
    okm.unpack("H*")[0]
  end
-%>
<% @db_nodes.each do |hostname, db_node| -%>
<%= hostname %><%--%>
  <%- @master_secrets.each do |timestamp, secret| -%>
    <%--%>,<%= timestamp -%>:<%= derive_secret(hostname, secret) -%>
  <%- end %>
<% end -%>
